@using ConnectFour
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: yellow;
            /** the color of the board **/
            --player1: red;
            /** Player 1's piece color **/
            --player2: blue;
            /** Player 2's piece color **/
        }

        div.board {
            margin-top: 1em;
            flex-wrap: wrap;
            width: 30em;
            height: 24em;
            overflow: hidden;
            display: inline-flex;
            flex-direction: row;
            flex-wrap: wrap;
            z-index: -5;
            row-gap: 0;
            pointer-events: none;
            border-left: 10px solid var(--board-bg);
        }

        span.container {
            width: 4em;
            height: 4em;
            margin: 0;
            padding: 4px;
            overflow: hidden;
            background-color: transparent;
            position: relative;
            z-index: -2;
            pointer-events: none;
        }

        .container span {
            width: 3.5em;
            height: 3.5em;
            border-radius: 50%;
            box-shadow: 0 0 0 3em var(--board-bg);
            left: 0px;
            position: absolute;
            display: block;
            z-index: 5;
            pointer-events: none;
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }

        @for (var i = 0; i < 42; i++)
        {
            <span class="@pieces[i]"></span>
        }

    </div>
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
    
    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

}
